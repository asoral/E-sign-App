{
  "version": 3,
  "sources": ["../../../../../apps/esign_app/esign_app/public/js/timeline_button.js", "../../../../../apps/esign_app/esign_app/public/js/esign.bundle.js"],
  "sourcesContent": ["// Timeline button for Frappe\n$(document).on(\"app_ready\", function () {\n  $.each(frappe.boot.user.can_read, function (i, doctype) {\n    let buttonAdded = false; // Track if the button has been added\n\n    frappe.ui.form.on(doctype, {\n      refresh: function (frm) {\n        if (!frm.is_new()) {\n          if (frm.footer?.frm?.timeline && !buttonAdded) {\n            // Function to open the popup\n            let send_esign = async () => {\n              console.log('inside send button')\n              let user = frappe.session.user;\n              console.log('got user section',user)\n              let userDetails = await frappe.db.get_value(\"User\", user, [\n                \"full_name\",\n                \"email\",\n              ]);\n              console.log('got user details section',userDetails)\n              let doctype = frm.doctype;\n              console.log('got doctype ',doctype)\n              let docname = frm.docname;\n              console.log('got docname ',docname)\n              let fullName = userDetails?.message?.full_name || \"Unknown User\";\n              let email = userDetails?.message?.email || \"No Email\";\n              \n              let templates = [];\n              try {\n                let response = await fetch(\n                  `/api/method/esign_app.api.get_templetes?user_mail=${email}`\n                );\n                let data = await response.json();\n                console.log('got response',data)\n                if (data.message?.status === 200 && Array.isArray(data.message.data)) {\n                  templates = data.message.data.map((temp) => ({\n                    label: temp.templete_title.trim(), \n                    value: temp.name.trim(),\n                  }));\n                }\n              } catch (error) {\n                console.error(\"Error fetching templates:\", error);\n              }\n\n              console.log(\"Fetched Templates:\", templates);\n\n\n              // // API URL with dynamic values\n              // let pdfUrl = `/api/method/frappe.utils.print_format.download_pdf?doctype=${doctype}&name=${docname}&format=Standard&no_letterhead=1&letterhead=No%20Letterhead&settings=%7B%7D&_lang=en`;\n              // console.log('pdf url Loaded',pdfUrl)\n              // // Fetch PDF and convert to base64\n              // let pdfBase64 = \"\";\n              // try {\n              //   let response = await fetch(pdfUrl);\n              //   let blob = await response.blob();\n              //   let reader = new FileReader();\n              //   reader.readAsDataURL(blob);\n              //   reader.onloadend = function () {\n              //     pdfBase64 = reader.result.split(\",\")[1];\n              //     console.log(\"PDF Base64:\", pdfBase64);\n              //   };\n              // } catch (error) {\n              //   console.error(\"Error fetching PDF:\", error);\n              // }\n\n              let templateOptions = {};\n              if (templates.length) {\n                templateOptions = Object.fromEntries(templates.map((t) => [t.label, t.value]));\n              }\n              console.log(\"*************************\",Object.keys(templateOptions))\n              // show the dialog box \n              let dialog = new frappe.ui.Dialog({\n                title: \"Send to eSign test\",\n                fields: [\n                  {\n                    fieldname: \"user_details\",\n                    label: \"User Details\",\n                    fieldtype: \"HTML\",\n                    options: `<div style=\"\n                              font-family: 'Arial', sans-serif;\n                              font-size: 16px;\n                              line-height: 1.6;\n                              color: #333;\n                              background: #f9f9f9;\n                              padding: 15px 20px;\n                              border: 1px solid #ddd;\n                              border-radius: 10px;\n                              max-width: 400px;\n                              box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n                          \">\n                              <p style=\"\n                                  margin: 0 0 5px;\n                                  font-weight: 600;\n                                  font-size: 18px;\n                                  color: #222;\n                              \">\n                                  ${fullName}\n                              </p>\n                              <p style=\"\n                                  margin: 0;\n                                  font-size: 14px;\n                                  color: #555;\n                              \">\n                                  ${email}\n                              </p>\n                          </div>\n                          </br>\n                          `,\n                  },\n                  // {\n                  //   fieldname: \"doctype\",\n                  //   label: \"Doctype\",\n                  //   fieldtype: \"Data\",\n                  //   default: doctype,\n                  //   read_only: 1,\n                  // },\n                  // {\n                  //   fieldname: \"docname\",\n                  //   label: \"Document Name\",\n                  //   fieldtype: \"Data\",\n                  //   default: docname,\n                  //   read_only: 1,\n                  // },\n                  {\n                    fieldname: \"custom_docname\",\n                    label: \"Enter Name\",\n                    default: docname,\n                    fieldtype: \"Data\",\n                    reqd: 1,\n                  },{\n                    fieldname: \"letterhead\",\n                    label: \"Select Letter Head\",\n                    fieldtype: \"Link\",\n                    options: \"Letter Head\",\n                  },\n                {\n                    fieldname: \"print_format\",\n                    label: \"Select Print Format\",\n                    fieldtype: \"Link\",\n                    options: \"Print Format\",\n                    get_query: function () {\n                        return {\n                            filters: {\n                                \"doc_type\": cur_frm.doc.doctype // Show Print Formats specific to this Doctype\n                            }\n                        };\n                    }\n                },\n                  {\n                    fieldname: \"template_select\",\n                    label: \"Select Template\",\n                    fieldtype: \"Link\",\n                    options: \"TempleteList\", // The doctype where templates are stored\n                    get_query() {\n                      return {\n                        filters: {\n                          name: [\"in\", Object.values(templateOptions)], // Filtering only the fetched templates\n                        }\n                      };\n                    }\n                  },\n                  \n                ],\n                primary_action_label: \"Submit\",\n                primary_action: async (values) => {\n                  frappe.show_alert({ message: \"Processing...\", indicator: \"orange\" });\n                  console.log(\"LLLLLKKLKLKL\",values.print_format, values.letterhead )\n                  function getPDFUrl() {\n                    let doctype = cur_frm.doc.doctype;\n                    let docname = cur_frm.doc.name;\n                    \n                    let printFormat = values.print_format || \"Standard\"; // Default to \"Standard\" if not selected\n                    let letterhead = values.letterhead || \"No Letterhead\"; // Default if not selected\n                    let noLetterhead = letterhead === \"No Letterhead\" ? 1 : 0; // Set `no_letterhead=1` if no letterhead is selected\n                \n                    let pdfUrl = `/api/method/frappe.utils.print_format.download_pdf?doctype=${doctype}&name=${docname}&format=${printFormat}&no_letterhead=${noLetterhead}&letterhead=${encodeURIComponent(letterhead)}&settings=%7B%7D&_lang=en`;\n                \n                    return pdfUrl;\n                  }\n                  let pdfUrl = getPDFUrl();\n                  console.log(pdfUrl);\n                  // let pdfUrl = `/api/method/frappe.utils.print_format.download_pdf?doctype=${doctype}&name=${docname}&format=Standard&no_letterhead=1&letterhead=No%20Letterhead&settings=%7B%7D&_lang=en`;\n                  console.log(\"PDF URL Loaded:\", pdfUrl);\n              \n                  // Function to fetch PDF and convert it to base64\n                  async function fetchPdfBase64(url) {\n                      try {\n                          let response = await fetch(url);\n                          let blob = await response.blob();\n                          return new Promise((resolve, reject) => {\n                              let reader = new FileReader();\n                              reader.readAsDataURL(blob);\n                              reader.onloadend = () => resolve(reader.result.split(\",\")[1]);\n                              reader.onerror = (error) => reject(error);\n                          });\n                      } catch (error) {\n                          console.error(\"Error fetching PDF:\", error);\n                          return null;\n                      }\n                  }\n              \n                  // Wait for the base64 conversion to complete\n                  let pdfBase64 = await fetchPdfBase64(pdfUrl);\n                  if (!pdfBase64) {\n                      frappe.msgprint({\n                          title: \"Error\",\n                          message: \"Failed to fetch and convert PDF!\",\n                          indicator: \"red\",\n                      });\n                      return;\n                  }\n              \n                  console.log(\"PDF Base64:\", pdfBase64);\n              \n                  let selectedLabel = values.template_select;\n                  console.log(\"User Email:\", email);\n              \n                  // Show Frappe loading spinner\n                 \n              \n                  frappe.call({\n                      method: \"esign_app.api.fetch_and_print_data\",\n                      args: {\n                          custom_docname: values.custom_docname,\n                          selectedValue: selectedLabel,\n                          pdfBase64: pdfBase64,\n                          email: email,\n                      },\n                      callback: function (response) {\n                          if (response.message && response.message.status === 200) {\n                              frappe.hide_progress();\n                              frappe.msgprint({\n                                  title: \"Success\",\n                                  message: \"Document Created Successfully!\",\n                                  indicator: \"green\",\n                              });\n                          } else {\n                              frappe.msgprint({\n                                  title: \"Error\",\n                                  message: response.message?.error || \"Something went wrong!\",\n                                  indicator: \"red\",\n                              });\n                          }\n                      },\n                      error: function (error) {\n                          frappe.hide_progress();\n                          frappe.msgprint({\n                              title: \"Error\",\n                              message: \"Failed to create the document!\",\n                              indicator: \"red\",\n                          });\n                          console.error(\"API Call Failed:\", error);\n                      },\n                  });\n              \n                  // Hide the dialog after clicking submit\n                  dialog.hide();\n              }\n              \n              \n              });\n\n              dialog.show();\n            };\n\n            var timeline = frm.footer.frm.timeline;\n            timeline.add_action_button(\n              __(\"Send to Esign\"),\n              send_esign,\n              \"share\",\n              \"btn-secondary send-raven-button\"\n            );\n\n            buttonAdded = true;\n          }\n        }\n      },\n    });\n  });\n});\n", "$(document).on('app_ready', function (){\n\n});\n\nimport './timeline_button';"],
  "mappings": "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",
  "names": ["_a", "_b", "doctype", "docname", "pdfUrl"]
}
